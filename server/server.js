require('dotenv').config();
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const path = require('path');
const User = require('./api/users'); // –ú–æ–¥–µ–ª—å
const connectDB = require('./db/db'); // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB

const corsOptions = {
  origin: 'https://dima0073231.github.io/nftgo/', // –¢–æ—á–Ω—ã–π –¥–æ–º–µ–Ω –≤–∞—à–µ–≥–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –Ω–∞ GitHub Pages
  methods: ['GET', 'HEAD', 'PATCH', 'POST', 'PUT', 'DELETE'], // –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ HTTP-–º–µ—Ç–æ–¥—ã
  credentials: true, // –†–∞–∑—Ä–µ—à–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –∫—É–∫–∏ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
};



// Middleware
const app = express();
app.use(cors(corsOptions));
app.use(express.json());


const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`üöÄ Server started on http://localhost:${PORT}`);
});
// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
connectDB();

// –†–æ—É—Ç—ã
app.post('/api/user', async (req, res) => {
    try {
        const user = new User(req.body); 
        await user.save();
        res.status(201).json(user);
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:', user.username);
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err.message);
        res.status(400).json({ error: err.message });
    }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (GET-–∑–∞–ø—Ä–æ—Å)
app.get('/api/user', async (req, res) => {
    try {
        const users = await User.find().sort({ createdAt: -1 });
        res.json(users);
        console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –∏–∑ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.`);
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', err.message);
        res.status(500).json({ error: 'Failed to fetch users' });
    }
});

const WebSocket = require('ws');
const wss = new WebSocket.Server({ port: 8080 });

let clients = new Set();

wss.on('connection', (ws) => {
  clients.add(ws);
  console.log('–ü–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫–ª–∏–µ–Ω—Ç. –°–µ–π—á–∞—Å –æ–Ω–ª–∞–π–Ω:', clients.size);

  // –†–∞—Å—Å—ã–ª–∞–µ–º —á–∏—Å–ª–æ –æ–Ω–ª–∞–π–Ω–æ–≤ –≤—Å–µ–º
  broadcastOnline();

  ws.on('close', () => {
    clients.delete(ws);
    console.log('–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è. –°–µ–π—á–∞—Å –æ–Ω–ª–∞–π–Ω:', clients.size);
    broadcastOnline();
  });
});

function broadcastOnline() {
  const count = clients.size;
  const message = JSON.stringify({ online: count });

  for (let client of clients) {
    if (client.readyState === WebSocket.OPEN) {
      client.send(message);
    }
  }
}



// if (process.env.NODE_ENV === 'development') {
//   require('./test-auto'); 
// }
